<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>se.ivankrizsan.spring</groupId>
	<artifactId>springboot-dockerimage</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>springboot-dockerimage</name>
	<description></description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
	    <profiles>
        <!--
            This profile builds a Docker image with the Spring Boot application.
            Before being able to build a Docker image using Maven, the environment
            variable DOCKER_HOME need to be set to the endpoint of the local
            Docker API.
            Example *nix: export set DOCKER_HOME=http://localhost:2375
            The Docker image is built using the following command:
            mvn -Pdockerimage package

            If a Docker image with the image name and tag (project version) already
            exists then one of the following may happen depending on the
            environment in which the build is run:
            - The existing image is given the image name and tag <none>.
            - No new Docker image is generated, but the existing image is retained.
            The suggested approach is to first delete any existing Docker image
            using the following Maven command before generating a new image:
            mvn -Pdockerimage clean
        -->
        <profile>
            <id>dockerimage</id>
            <dependencies>
                <!--
                    Here you declare dependencies to additional artifacts that
                    are to be copied into the Docker image.
                    No need to add a dependency to the Spring Boot application JAR
                    file here.
                -->
            </dependencies>
            <properties>
                <!-- Name of Docker image that will be built. -->
                <docker.image.name>springboot-webapp</docker.image.name>
                <!--
                    Directory that holds Docker file and static content
                    necessary to build the Docker image.
                -->
                <docker.image.src.root>src/main/resources/docker</docker.image.src.root>
                <!--
                    Directory to which the Docker image artifacts and the Docker
                    file will be copied to and which will serve as the root directory
                    when building the Docker image.
                -->
                <docker.build.directory>${project.build.directory}/docker</docker.build.directory>
            </properties>
            <build>
                <plugins>
                    <!--
                        Copy the directory containing static content to build directory.
                    -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${docker.build.directory}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${docker.image.src.root}</directory>
                                            <filtering>false</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!--
                        Copy the JAR file containing the Spring Boot application
                        to the application/lib directory.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <!--
                                                Specify groupId, artifactId, version and type for the
                                                artifact you want to package in the Docker image.
                                                In the case of a Spring Boot application, these are
                                                the same as the project group id, artifact id
                                                and version.
                                            -->
                                            <groupId>${project.groupId}</groupId>
                                            <artifactId>${project.artifactId}</artifactId>
                                            <version>${project.version}</version>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${docker.build.directory}/application/lib</outputDirectory>
                                            <!--
                                                Specify the destination name as to have one and the same name
                                                to refer to in the Docker file.
                                            -->
                                            <destFileName>springboot-webapp.jar</destFileName>
                                        </artifactItem>
                                        <!-- Add additional artifacts to be packaged in the Docker image here. -->

                                    </artifactItems>
                                    <outputDirectory>${docker.build.directory}</outputDirectory>
                                    <overWriteReleases>true</overWriteReleases>
                                    <overWriteSnapshots>true</overWriteSnapshots>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Remove any existing Docker image with the image name
                        and image tag (project version) configured in the properties.
                    -->
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.4.13</version>
                        <executions>
                            <execution>
                                <id>remove-image</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>removeImage</goal>
                                </goals>
                                <configuration>
                                    <imageName>${docker.image.name}</imageName>
                                    <imageTags>
                                        <imageTag>${project.version}</imageTag>
                                    </imageTags>
                                    <verbose>true</verbose>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Build the Docker image.
                    -->
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>1.3.6</version>
                        <executions>
                            <execution>
                                <id>default</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <contextDirectory>${project.build.directory}/docker</contextDirectory>
                            <writeTestMetadata>false</writeTestMetadata>
                            <dockerInfoDirectory></dockerInfoDirectory>
                            <verbose>true</verbose>
                            <forceCreation>true</forceCreation>
                            <imageName>${docker.image.name}</imageName>
                            <repository>${docker.image.name}</repository>
                            <tag>${project.version}</tag>
                            <forceTags>true</forceTags>
                            <pullNewerImage>false</pullNewerImage>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                            </imageTags>
                            <dockerDirectory>${project.build.directory}/docker</dockerDirectory>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>
